# This file is part of shellfire jsonreader. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/shellfire-dev/jsonreader/master/COPYRIGHT. No part of shellfire jsonreader, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2014-2015 The developers of shellfire jsonreader. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/shellfire-dev/jsonreader/master/COPYRIGHT.


core_dependency_requires '*' git
git_mostRecentCommit()
{
	local repositoryPath="$1"

	pushd "$repositoryPath"
	
		local commit="$(git_mostRecent '%H')"
		
	popd
	
	printf '%s' "$commit"
}

git_mostRecent()
{
	local repositoryPath="$1"
	local format="$2"

	pushd "$repositoryPath"
	
		git log -n 1 --format="format:$format"
	
	popd
}

core_dependency_requires '*' git
git_commitToTagOrCommit()
{
	local repositoryPath="$1"
	local commit="$2"
	
	pushd "$repositoryPath"
		set +e
		local tag="$(git describe --tags --exact-match "$commit" 2>/dev/null)"
		set -e
	popd
	
	if [ -n "$tag" ]; then
		printf '%s' "$tag"
	else
		printf '%s' "$commit"
	fi
}

core_dependency_requires '*' git
git_withOutputSilencedIfQuiet()
{
	local verbosityLevel=$1
	local gitCommand="$2"
	shift 2

	if [ "$(core_init_verbosity)" -lt $verbosityLevel ]; then
		set -- -q "$@"
	else
		set -- "$@"
	fi
	
	git "$gitCommand" "$@"
}

indigene_git_clean()
{
	local repositoryPath="$1"
	local repositoryCommit="$2"
	
	pushd "$repositoryPath"
	
		git_withOutputSilencedIfQuiet 2 clean -d -f -x
		git_withOutputSilencedIfQuiet 2 reset --hard "$repositoryCommit"
		
	popd
}

core_dependency_requires '*' git
indigene_git_tag()
{
	local repositoryFolderPath="$1"
	local tagName="$2"
	local tagMessage="$3"
	
	pushd "$repositoryFolderPath"
	
		git tag -a -m "$tagMessage" "$tagName"
		git_withOutputSilencedIfQuiet 2 push origin "$tagName"
		
	popd
}

core_dependency_requires '*' git
indigene_git_tagImport()
{
	local repositoryFolderPath="$1"
		
	pushd "$repositoryFolderPath"
		
		local upstreamTagName="upstream-$(git_mostRecent '%at-%H')"
		local longCommitHash="$(git_mostRecentCommit)"
		local iso8601Date="$(git_mostRecent '%aI')"
		local upstreamTagMessage="Imported from upstream at '$iso8601Date' from revision '$longCommitHash'"
		
	popd
	
	indigene_git_tag "$repositoryFolderPath" "$upstreamTagName" "$upstreamTagMessage"
}

indigene_git_versionedBranch()
{
	local repositoryFolderPath="$1"
	local branchFromBranchOrTagOrCommit="$2"
	local version="$3"
	local branchVariant="$4" # eg indigene
	
	local newBranch="$version"-"$branchVariant"
	
	pushd "$repositoryFolderPath"
		
		core_message NOTICE "Trying to checkout '$branchFromBranchOrTagOrCommit' to then create branch '$newBranch'"
		git_withOutputSilencedIfQuiet 2 checkout "$branchFromBranchOrTagOrCommit"
		git_withOutputSilencedIfQuiet 2 checkout -B "$newBranch" "$branchFromBranchOrTagOrCommit"
		
		git_withOutputSilencedIfQuiet 2 push origin "$branchFromBranchOrTagOrCommit"
		git_withOutputSilencedIfQuiet 2 push --set-upstream origin "$branchFromBranchOrTagOrCommit"
		
	popd
	
	indigene_git_tag "$newBranch"-0 "Creation of branch '$newBranch' from commit-ish '$branchFromBranchOrTagOrCommit'"
}

core_dependency_requires '*' cat
indigene_git_patchAm()
{
	local repositoryFolderPath="$1"
	local patchFilePath="$2"
	
	pushd "$repositoryFolderPath"
	
		cat "$patchFilePath" | git_withOutputSilencedIfQuiet 2 am --3way
	
	popd
}

indigene_git_cherrypicks()
{
	local repositoryFolderPath="$1"
	local rationale="$2"
	shift 2
	
	pushd "$repositoryFolderPath"
	
		git_withOutputSilencedIfQuiet 2 cherry-pick --strategy=recursive -X theirs "$@"
	
	popd
}

core_dependency_requires '*' git
indigene_git_addUpstreamRemote()
{
	local repositoryFolderPath="$1"
	local upstreamRemote="$2"
	
	local repositoryName="$(core_compatibility_basename "$repositoryFolderPath")"
		
	pushd "$repositoryFolderPath"
		
		git remote add -f --tags upstream "$upstreamRemote"
	
	popd
}
